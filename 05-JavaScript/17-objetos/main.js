/**
 *  Dentro de una variable podemos guardar:
 *    Valores primitivos √∫nicos:
 *            String
 *            Number
 *            Boolean
 *            null
 *            undefined
 *            Symbol
 *    Varios valores en una misma variable:
 *            Arrays
 *    Funciones para ejecutar c√≥digo y para retornar informaci√≥n:
 *            function
 *            () => {}
 * 
 *    Objetos --> Nos dan la posibilidad de guardar varios datos que hacen referencia a una misma cosa
 * 
 */
/*

//* Creaci√≥n de un objeto literal    // const objeto = { propiedad: valor }
//*                                     const object = { key: value }

const persona = { 
  edad: 34,
  nombre: 'Ivan',
  sexo: 'masculino',
  amigos: ['Juan', { nombre: 'Maria' }],
  direccion: {
    calle: 'Wallaby, 42, Sydney',
    cp: '02574'
  }
};


const personas = [ {nombre: 'ivan', edad: 34}  , { nombre: 'Manuel', edad: 35 }];

console.log(personas);


// // Podemos cambiar en cualquier momento el valor de una de las propiedades
// persona.edad = 23;

// // Podemos tambi√©n a√±adir de formar literal una propiedad que no exista
// persona.colorPelo = 'casta√±o claro';

// console.log(persona);

const arr = ['Ivan', 'Kira', 'Freya'];

const obj = { nombre: 'Ivan', edad: 34, amigos: 4};


// As√≠ como en los arrays podemos ver lo que hay dentro de un √≠ndice poniendo el √≠ndice entre corchetes, tambi√©n podemos ver lo que hay dentro de una propiedad de un objeto poniendo el √≠ndice de esa propiedaa dentro de los corchetes
// console.log(arr[0]); // 'Ivan'
// console.log(obj['edad']); // 34

//* for...in
// Podemos recorrer un objeto utilizando el for...in

// for(let index in obj) {  
//   console.log(`${index} : ${obj[index]}`)
// }

//* Todos los objetos tambi√©n pueden contener funcionalidades.

const coche = {
  marca: 'Volkswagen',
  puertas: 5,
  color: 'rojo',

  // Esto que es lo mismo que una funci√≥n, al estar dentro de un objeto se le llama m√©todo
  arrancar: function() {
    console.log('Pruuummmm! üöïüí®');
  },


  // Podemos variar cualquier propeidad de un objeto desde dentro de un m√©todo. Para ello es necesario utilizar la palabra this, que hace referencia a este mismo objeto
  cambiarPuertas: function(numPuertas) {
    this.puertas = numPuertas;
    console.log(`Ahora el coche tiene ${this.puertas} puertas.`);
  }

}


coche.arrancar();
coche.cambiarPuertas(3);
console.log(coche.puertas);

*/
//* Por lo general nos encontramos la info que vemos por la web de la siguiente forma, un array que contiene varios objetos.

const arrayDeUsuarios = 
[
  {id: 1, nombre: 'ivluengo',email: 'ivan@email.com' },
  {id: 2, nombre: 'manu33', email: 'manu@email.com' },
  {id: 3, nombre: 'anne74', email: 'anna@email.com' }
];


for(let usuario of arrayDeUsuarios) {
  console.log(usuario.nombre);
}
